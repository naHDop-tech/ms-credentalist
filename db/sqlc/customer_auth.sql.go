// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: customer_auth.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAuthSettings = `-- name: CreateAuthSettings :one
INSERT INTO customer_auth ("id", "is_verified", "opt", "channel", "customer_id")
VALUES ($1, $2, $3, $4, $5) RETURNING "id"
`

type CreateAuthSettingsParams struct {
	ID         uuid.UUID `json:"id"`
	IsVerified bool      `json:"is_verified"`
	Opt        string    `json:"opt"`
	Channel    string    `json:"channel"`
	CustomerID uuid.UUID `json:"customer_id"`
}

func (q *Queries) CreateAuthSettings(ctx context.Context, arg CreateAuthSettingsParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createAuthSettings,
		arg.ID,
		arg.IsVerified,
		arg.Opt,
		arg.Channel,
		arg.CustomerID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAuthSettingsByCustomerId = `-- name: GetAuthSettingsByCustomerId :one
SELECT id, customer_id, is_verified, opt, channel, created_at FROM customer_auth
WHERE customer_id = $1 ORDER BY created_at ASC LIMIT 1
`

func (q *Queries) GetAuthSettingsByCustomerId(ctx context.Context, customerID uuid.UUID) (CustomerAuth, error) {
	row := q.db.QueryRowContext(ctx, getAuthSettingsByCustomerId, customerID)
	var i CustomerAuth
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.IsVerified,
		&i.Opt,
		&i.Channel,
		&i.CreatedAt,
	)
	return i, err
}

const getAuthSettingsHistory = `-- name: GetAuthSettingsHistory :many
SELECT id, customer_id, is_verified, opt, channel, created_at FROM customer_auth
WHERE customer_id = $1 ORDER BY created_at ASC
`

func (q *Queries) GetAuthSettingsHistory(ctx context.Context, customerID uuid.UUID) ([]CustomerAuth, error) {
	rows, err := q.db.QueryContext(ctx, getAuthSettingsHistory, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerAuth{}
	for rows.Next() {
		var i CustomerAuth
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.IsVerified,
			&i.Opt,
			&i.Channel,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastNotVerifiedRecord = `-- name: GetLastNotVerifiedRecord :one
SELECT id, customer_id, is_verified, opt, channel, created_at FROM customer_auth
WHERE customer_id = $1 AND is_verified = false ORDER BY created_at ASC LIMIT 1
`

func (q *Queries) GetLastNotVerifiedRecord(ctx context.Context, customerID uuid.UUID) (CustomerAuth, error) {
	row := q.db.QueryRowContext(ctx, getLastNotVerifiedRecord, customerID)
	var i CustomerAuth
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.IsVerified,
		&i.Opt,
		&i.Channel,
		&i.CreatedAt,
	)
	return i, err
}
