// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: credential.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addCredential = `-- name: AddCredential :one
INSERT INTO credentials ("id", "title", "login_name", "secret", "description", "customer_id")
VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"
`

type AddCredentialParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	LoginName   string    `json:"login_name"`
	Secret      string    `json:"secret"`
	Description string    `json:"description"`
	CustomerID  uuid.UUID `json:"customer_id"`
}

func (q *Queries) AddCredential(ctx context.Context, arg AddCredentialParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addCredential,
		arg.ID,
		arg.Title,
		arg.LoginName,
		arg.Secret,
		arg.Description,
		arg.CustomerID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getCredentialsByCustomerId = `-- name: GetCredentialsByCustomerId :many
SELECT id, title, login_name, secret, description, customer_id, created_at, updated_at FROM credentials
WHERE customer_id = $1
`

func (q *Queries) GetCredentialsByCustomerId(ctx context.Context, customerID uuid.UUID) ([]Credential, error) {
	rows, err := q.db.QueryContext(ctx, getCredentialsByCustomerId, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Credential{}
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.LoginName,
			&i.Secret,
			&i.Description,
			&i.CustomerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFullCredentialsByCustomerId = `-- name: GetFullCredentialsByCustomerId :many
SELECT
    c.id,
    c.title,
    c.login_name,
    c.secret,
    c.description,
    c.customer_id,
    ss.show_immediately,
    ss.send_to_email,
    ss.send_to_phone
FROM credentials c
JOIN show_strategies ss ON ss.credential_id = c.id
WHERE c.customer_id = $1
`

type GetFullCredentialsByCustomerIdRow struct {
	ID              uuid.UUID `json:"id"`
	Title           string    `json:"title"`
	LoginName       string    `json:"login_name"`
	Secret          string    `json:"secret"`
	Description     string    `json:"description"`
	CustomerID      uuid.UUID `json:"customer_id"`
	ShowImmediately bool      `json:"show_immediately"`
	SendToEmail     bool      `json:"send_to_email"`
	SendToPhone     bool      `json:"send_to_phone"`
}

func (q *Queries) GetFullCredentialsByCustomerId(ctx context.Context, customerID uuid.UUID) ([]GetFullCredentialsByCustomerIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getFullCredentialsByCustomerId, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFullCredentialsByCustomerIdRow{}
	for rows.Next() {
		var i GetFullCredentialsByCustomerIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.LoginName,
			&i.Secret,
			&i.Description,
			&i.CustomerID,
			&i.ShowImmediately,
			&i.SendToEmail,
			&i.SendToPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCredential = `-- name: UpdateCredential :exec
UPDATE credentials
SET title = $1, login_name = $2, secret = $3, description = $4, updated_at = $5
WHERE id = $6
`

type UpdateCredentialParams struct {
	Title       string       `json:"title"`
	LoginName   string       `json:"login_name"`
	Secret      string       `json:"secret"`
	Description string       `json:"description"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
	ID          uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateCredential(ctx context.Context, arg UpdateCredentialParams) error {
	_, err := q.db.ExecContext(ctx, updateCredential,
		arg.Title,
		arg.LoginName,
		arg.Secret,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
