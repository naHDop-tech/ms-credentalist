// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: show_strategy.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createShowStrategy = `-- name: CreateShowStrategy :one
INSERT INTO show_strategies ("id", "show_immediately", "send_to_email", "send_to_phone", "credential_id")
VALUES ($1, $2, $3, $4, $5) RETURNING "id"
`

type CreateShowStrategyParams struct {
	ID              uuid.UUID `json:"id"`
	ShowImmediately bool      `json:"show_immediately"`
	SendToEmail     bool      `json:"send_to_email"`
	SendToPhone     bool      `json:"send_to_phone"`
	CredentialID    uuid.UUID `json:"credential_id"`
}

func (q *Queries) CreateShowStrategy(ctx context.Context, arg CreateShowStrategyParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createShowStrategy,
		arg.ID,
		arg.ShowImmediately,
		arg.SendToEmail,
		arg.SendToPhone,
		arg.CredentialID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getShowStrategy = `-- name: GetShowStrategy :one
SELECT id, show_immediately, send_to_email, send_to_phone, credential_id, created_at, updated_at FROM show_strategies
WHERE credential_id = $1 LIMIT 1
`

func (q *Queries) GetShowStrategy(ctx context.Context, credentialID uuid.UUID) (ShowStrategy, error) {
	row := q.db.QueryRowContext(ctx, getShowStrategy, credentialID)
	var i ShowStrategy
	err := row.Scan(
		&i.ID,
		&i.ShowImmediately,
		&i.SendToEmail,
		&i.SendToPhone,
		&i.CredentialID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateShowStrategy = `-- name: UpdateShowStrategy :exec
UPDATE show_strategies
SET show_immediately = $1, send_to_email = $2, send_to_phone = $3, updated_at = $4
WHERE id = $5
`

type UpdateShowStrategyParams struct {
	ShowImmediately bool         `json:"show_immediately"`
	SendToEmail     bool         `json:"send_to_email"`
	SendToPhone     bool         `json:"send_to_phone"`
	UpdatedAt       sql.NullTime `json:"updated_at"`
	ID              uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateShowStrategy(ctx context.Context, arg UpdateShowStrategyParams) error {
	_, err := q.db.ExecContext(ctx, updateShowStrategy,
		arg.ShowImmediately,
		arg.SendToEmail,
		arg.SendToPhone,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
